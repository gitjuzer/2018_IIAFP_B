Rendszerterv

I. A rendszer célja

A rendszer célja, hogy a Követelmény és Funkcionális specifikációban meghatározott megrendelõi folyamatokat online színtérbe adoptálja.
A rendszer szerepet kíván vállalni abban, hogy a fiatal generációk egy modernebb környezetben, naprakész technológiával sajátíthassák el a tananyagot.
A felépítendõ rendszer a megrendelõvel kötött szerzõdésnek megfelelõen elõször privát elérhetõségû lesz, vagyis Google Play-bõl nem lesz szabadon letölthetõ és használható.
A megrendelõ nem talált az igényeit teljesen lefedõ szoftvert, ezért ez a rendszer egy speciális igényhalmazt fog kielégíteni.
A rendszer a 6-12 éves korosztály matematika oktatásával foglalkozik játékos formában. A tartalmat és a design-t ennek megfelelõen kell felépíteni minden, a megrendelõ által igényelt platformon (desktop web, Android).
A rendszernek meg kell felelnie a megrendelõ által támasztott speciális igényhalmaznak, de ezen túlmenõen elég általánosnak kell lennie ahhoz is, hogy a késõbbiekben megállja a helyét fizetõs Google Play alkalmazásként.
A rendszernek a játékos oktatáson felül könnyíteni kell a megrendelõ alkalmazottainak adminisztratív terhein is.
A rendszernek képesnek kell lennie elõkészíteni, levezetni és automatikusan kiértékelni az óra eleji felmérõket. Ezen eredményeket a félév során folyamatosan kell tudnia követnie, és a félév végén egyszerû kiértékelést kell tudnia adni.
A rendszert a felhasználó oktatóknak tudniuk kell implementálni a mindennapi tanításba, az órák menetébe.
Biztosítani szükséges külön oktatói és tanulói felületet különbözõ jogosultsági szintekkel.
A rendszernek tudnia kell követni az egyes tanulók teljesítményét, meg kell tudnia állapítani, hogy hol ütköztek nehézségekbe az egyes diákok, és mindezeket az információkat az oktató rendelkezésére kell bocsátania.

A rendszernek nem célja a tanulók csalásra tanítása, az oktató-tanuló kapcsolat roncsolása, a tanulási hatékonyság csökkentése. Nem célja továbbá a tanítási folyamat teljes kiváltása.

II. Projektterv
...

III. Üzleti folyamatok modellje

Üzleti szereplõk:
	-Oktató
	-Tanuló
Támogatandó üzleti folyamatok
	-Óra eleji felmérõ
	-Év közi témazáró dolgozat (opcionáls)
	-Tanulói eredménykövetés
	-Félév végi értékelés

Üzleti folyamatok leírása (bemenetek, kimenetek, szereplõk)

Óra eleji felmérõ: Szereplõk: Oktató, Tanuló
A szoftver az oktató által elõre megadott kérdéseket és válaszokat (bemenet) juttatja el a klienseknek (Tanulók eszközei: ennél a folyamatnál általában telefon), akik kiválasztják a helyes vagy helytelen megoldást. Ezeket a rendszer fogadja, eltárolja, majd a felmérõ végén azonnal visszajelzi az elért pontszámot(kimenet). Ezt a pontszámot el is menti az adott felmérõt egyértelmûen beazonosító adatokkal. Ezt minden felmérõnél megteszi, aminek az év végi értékelésnél lesz szerepe.

Év közi témazáró dolgozat (opcionális): Szereplõk: Oktató, Tanuló
Csak akkor létezik ez a folyamat, amennyiben az Oktató úgy dönt, hogy felhasználja a szoftvert a témazáró dolgozatnál is. Ebben az esetben az óra eleji felmérõhöz hasonlóan történik minden, kivéve, hogy az elért pontszámról (kimenet) a tanuló nem kap azonnali visszajelzést. Ezt egy külön adatbázisba (valós kimenet) menti a szoftver, ami az Oktató rendelkezésére fog állni, amikor javítani kezdi a dolgozatokat.

Tanulói eredménykövetés: Szereplõk: Tanuló, Oktató
Az óra eleji felmérõkbõl, opcionálisan házi feladatokból érkezõ pontszámokat (bemenet) a szoftver a félév során folyamatosan nyomon követi. Grafikonon lehetõsége van az Oktatónak követni az egyes tanulók pontszámainak alakulását (kimenet), így következtetéseket tud levonni a tanulók változó teljesítményébõl, célzottabban tud beavatkozni a jobb eredmények elérése érdekében.

Félév végi értékelés: Szereplõk: Tanuló, Oktató
A Tanulói eredménykövetés alapján a szoftver a félév végén összesíti az egyes tanulók pontszámait, differenciált kimutatást készít az oktatónak, ami megmutatja a tanulók közötti különbségeket. Az Oktató ez alapján tudja skálázni a tanulók teljesítményét, ami segítséget nyújt számára a félév végi végleges értékelés kialakításában.

IV. Követelmények
...

V. Funkcionális terv
...

VI. Fizikai környezet

A webes részt fejlesztő csapat számára a fejlesztési folyamat az ingyenes, nyílt forráskódú 
Visual Studio Code fejlesztői környezetben zajlik, ami képes az intelligens kódkezelésre (intelligent code completion) az IntelliSense segítségével.
Ahhoz, hogy a szoftvert használhassuk a számítógépen szükség van egy Windows vagy macOS vagy Linux operációs rendszert futtató számítógépre és
egy webböngészőre. Ajánlott webböngészők: Firefox, Google Chrome, Opera, Safari. 
Az alkalmazás mobiltelefonon történő használata Android 5.0-ás vagy ettől újabb verziószámú Androidos operációs rendszert igényel.
Az androidos szoftver fejlesztése Android Studio-ban történik.

VII. Absztrakt domain modell
...

VIII. Architekturális terv
...

IX. Adatbázisterv
	MELLÉKLET: Adatbázis tervek/db_terv_alpha_pdf.pdf
	User tábla:
		Id(INT, Primary key); (Username(VARCHAR (16); Password(VARCHAR (16)) hash-el kódolva; First_name(VARCHAR(45)); Last_name(VARCHAR(45)); Created_at(DATETIME) létrehozás dátuma; Last_login(DATETIME, nullable) utolsó belépés dátuma;
		Felhasználói adatok eltárolására alkalmas.
	Token tábla:
		Id(INT, Primary key); Token(VARCHAR(100)) JSON webtoken eltárolására; Created_at(DATETIME); Expires_at(DATETIME) token lejárati dátuma; IsActive(TINYINT, nullable) token aktív-e; User_Id(INT, Foreign key)
		RESTful architekúra számára kialakítva, a userek tokenjeinek eltárolására alkalmas.
	Role tábla:
		Id(INT, Primary key); Role_name(VARCHAR(45)) szerepkör neve; Role_description(VARCHAR(45)) szerepkör leírása
		Szerepkörök leírására és tárolásra alkalmas.
	User_To_Role tábla:
		User_Id_PK(Primary key); Role_Id_PK(Primary key)
		A táblával userekhez rendelhetünk szerepköröket, osztott elsődleges kulcsok
	Permission tábla:
		Id(INT); Permission_name(VARCHAR(45)) jogosultság nevét írja le
		Ebben a táblában definiálhatunk jogosultságokat, pl játék kérdéseit módosíthatja stb.
	Role_To_Permission tábla:
		Role_Id_PK(INT, Primary key); Permission_Id_PK(INT, Primary key)
		Szerepkörökhöz rendelhetünk ebben a táblában jogosultságokat, pl csak a tanár szerepkör tudja módosítani a játék kérdéseit. Osztott elsődleges kulcsok.
	Classroom tábla:
		Id(INT, Primary key); Name(VARCHAR(45)) osztály neve; User_Id(INT, Foreign key)
		Ebben a táblában tároljuk az osztályokat, egy osztályhoz több user tartozhat.
	Game tábla:
		Id(INT, Primary key); Name(VARCHAR(45)) játék neve; Description(VARCHAR(250), nullable) játék leírása
		Ebben a táblában tárolhatjuk a játékok fajtáit.
	Classroom_To_Game tábla:
		IsActive(TINYINT, nullable) a játék aktív-e az osztály számára; Game_Id_PK(INT, Primary key); Classroom_Id_PK(INT, Primary key)
		A táblában osztályokhoz rendelhetünk játékokat, illetve megadhatjuk, hogy a hozzárendelt játékok aktívak-e. Osztott elsődleges kulcsok.
	Difficulty tábla:
		Difficulty_level(INT, Primary key) nehézségi szintet definiál.
	Game_session tábla:
		Id(INT, Primary key); Max_points(INT) maximum megszerezhető pontok száma; Game_Id(INT, Foreign key); Difficulty_level(INT, Foreign key)
		Ebben a táblában játékokhoz tudunk létrehozni ún. "sessionokat", "kérdéssorozatokat", és ezeknek a sorozatoknak tudjuk definiálni a maximum megszerezhető pontszámot, illetve nehézségi szintet tudunk hozzárendelni.
	Statistic tábla:
		Id(INT, Primary key); Gained_points(INT); Created_at(DATETIME); User_Id(INT, Foreign key); Game_session_Id(INT, Foreign key)
		Ebben a táblában tároljuk a lejátszott játékmeneteket, eltároljuk hogy melyik user, melyik játékhoz tartozó sessiont játszotta le, és hogy abból hány pontot szerzett.
	Question tábla: 
		Id(INT, Primary key); Question(VARCHAR(250)) a sessionhoz tartozó kérdés; Points(INT) hány pontot ér a kérdés; Game_session_Id(INT)
		Ebben a táblában tároljuk el a játékokhoz tartozó sessionokhoz tartozó kérdéseket.
	Wrong_answer tábla:
		Id(INT, Primary key); Wrong_answer(VARCHAR(250)); Question_Id(INT, Foreign key)
		Ebben a táblában tároljuk a kérdésekhez tartozó rossz válaszokat, egy kérdéshez tartozhat több rossz válasz is.
	Correct_answer tábla:
		Question_Id(INT, Primary key); Correct_answer(VARCHAR(250));
		A táblában a kérdésekhez tartozó jó választ tároljuk el. A Question táblából a Question_Id az elsődleges kulcs, ugyanis egy kérdéshez csak egy jó válasz tartozik.
		(Igény szerint módosítható, ha például checkboxos kérdéseket is kell implementálni.)

X. Implementációs terv
...

XI. Tesztterv
I. Unit tesztek
	A program könnyebb kezelése és a lehető legtöbb hiba elkerülése érdekében fontos, hogy a fejlesztés közben is lehetőleg minden
	metódusra legyen írva unit test.
II. Alpha teszt:
	Az alpha tesztet a fejlesztők végzik, amelyben a rendszer összeomlását próbálják elérni remélhetőleg sikertelenül. Amennyiben 
	felderítenek egy hibát jelentést írnak róla, majd javítják.
III. Béta teszt:

XII. Telepítési terv

Fizika telepítési terv:

- Szükség van egy adatbázis szerverre, amely direktbe csatlakozik LAN-on 
  a webszerverre, amelyen egy alkalmazásszerver fut.
  
- A webszerver a lekérdezéseket REST API segítségével végzi.

- A webszerverre közvetlenül az internetről kapcsolódnak rá a kliensek.

Szoftver telepítési terv:

- A szoftver webes felületéhez csak egy ajánlott böngésző telepítése szükséges
  (Google Chrome, Firefox, Opera, Safari), külön szoftver nem kell hozzá.
  
- A szoftver Android-os telepítése és frissítése Google Play segítségével
  történik, tehát a felhasználónak már rendelkeznie kell vele telepítés előtt.	

XIII. Karbantartási terv

A szoftver a jövőben nem igényel nagy karbantartásokat, a szükséges karbantartások az 
alábbi egységekből állnak:

- Frissebb verziójú böngészőkben történő tesztelés, hiba észlelése esetén azoknak javítása.

- Új verziójú androidon történő tesztelés, hiba észlelése esetén azoknak javítása.

- A kiszolgáló szerver státuszának ellenőrzése, offline szerver esetén újraindítás.

- Igény esetén új funkciók implementálása.
 
- Igény esetén új feladat típusok implementálása.