1. A rendszer céljai, és nem céljai.

Sok mindent lehetne errõl mondani, de rövidre fogom, mert annyi idõm nincs, a ranked nem nyeri meg saját magát. Feltehetnénk magunknak a kérdést, hogy "mégis melyik rendszerrõl van itt szó?" na hát igen. Ez egy nagyon jó kérdés. Melyik rendszerek jöhetnek egyáltalán szóba? A tejút rendszer? Számítógépes rendszer? Kommunizmus? Rendszerváltás? Igazából bármelyik. Utálok dokumentálni, nemtudom látszódik-e. Pláne, hogy ennyire overkill az egész.

A mi rendszerünk, ami érdekel bennünket, az az a rendszer, amivel megvalósítjuk a célunkat. Nyilván nem egy scrum vagy egy kanban, hanem egy saját, elég speciális rendszer. Tartja a mondás is, "kicsi, savanyú, de a miénk". Nem másról, mint a csoportos munkáról van szó. A csoportos munka célja, hogy felkészítsen bennünket a jövõbeli akadályokra, hogy azokat majdnem gondmentesen átléphessük, ugyanis a programozók csapatban dolgoznak, mindenki kap egy kis részt, amit meg kell valósítania, aztán amint készen van vele, jön a következõ. Ez a folyamat addig ismétlõdik, amíg az aktuális célunkat el nem érjük. Ez nem csak a programozásban, de más iparágban is jellemzõ tevékenység. A csoportos munka nagyon jó hatással van a kommunikációs készségre, az emberi kapcsolatok kialakulására, az együttmûködésre, és sok egyéb más szociális tulajdonságra. Csoportban dolgozni jó.

A rendszer nem céljai közé tartozik az elbukás, a teljes megsemmisülés, a projekt létrejövésének hátráltatása és az Anschluss.
2. Jelenlegi helyzet leírása
3. A vágyálomrendszer leírása

A program elindításakor választhatunk, hogy oktatói, illetve tanulói felületre szeretnénk-e belépni. Ezt kiválasztva lehetõségünk van regisztrálni,
de míg diákként ez teljesen ingyenes és akadálymentes, oktatóként regisztrálni csak érvényes iskolai licenccel lehet, így megakadályozva, hogy
bárki használja a szoftvert. Az oktatói felületre belépve több funkciót is észrevehetünk: 
	1. Osztályok menedzselése
		1.1 Osztály létrehozása
			1.1.1 Diák hozzáadása osztályhoz
			1.1.2 Diák eltávolítása osztályból
		1.3 Osztály aktivitása
		1.4 Diákok gyakorlásainak eredményei
	2. Játékok listája
		2.1 Játék módosítása
			2.1.1 Kérdés/lehetõség hozzadása
			2.1.2 Kérdés/lehetõség törlése
			2.1.3 Kérdés/lehetõség módosítása
			2.1.4 Játék aktiválása/deaktiválása
		2.2 Játékok statisztikái
Oktatóként képesek vagyunk osztályokat létrehozni, ezekbe diákokat invitálni, így képesek elindítani a gyakorló feladatokat, ezek mellett 
képesek vagyunk diákokat eltávolítani az osztályokból. Ezeknek az osztályoknak az aktivitását is követni lehet, illetve az egyes diákok 
eredményeit is képesek vagyunk megtekinteni.
A játékokban szereplõ kérdéshalmazt képesek vagyunk bovíteni, ebbol kérdéseket törölni, vagy éppen módosítani. Ha szükséges, egyes játékokat
ki is tudunk kapcsolni, ha az nem túl népszerû a diákoknál, vagy egy hosszadalmasabb kérdésreformot hajtanánk végre, és amint végeztünk ezzel, újra
élesbe helyezhetjük a játékot. Meg tudjuk tekinteni az egyes játékok statisztikáit, például hogy mely játékot játsszák a legtöbben, melyben a legmagasabb 
a hibázási arány stb. 
Ha tanulói felületbe jelentkezünk be, és még nem vagyunk beinvitálva egyetlen osztályba sem, akkor a programban nem vagyunk képesek semmit
sem csinálni, ellenben ha meghívtak minket egy osztályba, láthatjuk az egyes játékokat, illetve a legjobb eredményünket az egyes játékokhoz
kapcsolódóan, és a próbálkozások számát.
4. A rendszerre vonatkozó külsõ megszorítások
5. Jelenlegi üzleti folyamatok modellje
6. Igényelt üzleti folyamatok modellje
7. Követelménylista
8. Használati esélyek
9. Megfeleltetés
10. Képernyõtervek

11. Forgatókönyvek:
A szoftver futtatása közben három szereplõ figyelhetõ meg.

- Az elsõ maga a kliens (ami lehet akár android, akár web alapú), 
ezen keresztül tudja a felhasználó használni, és élvezni az általunk készítendõ rendszert.
Regisztráció, majd bejelentkezés után kiválaszthatjuk, hogy melyik játékot szeretnénk elindítani.
A játékmód kiválasztása után megjelennek az adott játékhoz tartozó UI elemek, 
például lehet ez egy timer, vagy a játékos álatal még felhasználható segítségek száma, és az adott feladat részei.
- A második szereplõ a már elõzõekben említett játékos, akinek a teszt kitöltése a feladata, a megadott szabályok szerint.
Ilyen szabály lehet, például, hogy ne lépje túl a megadott idõkeretet, vagy ne hibázhat X alkalomnál többször.
- A harmadik szereplõ a Web-service, ez felel azért, hogy a felhasználó által küldött adatokat el tudjuk tárolni, 
illetve a már elkészült teszteket, és játékokhoz szükséges adatokat a kliensekhez tudjuk eljuttatni.

12. Funkció - követelmény megfeleltetés
13. fejezet

Fogalomszótár:
--------------

	-[bug]: fejlesztési hiba ami által a program nem a várt eredményt hozza 
	-[main menu]: A fõ menü, amely a weboldal/program indulásakor megjelenik(oktatói, tanulói felület kiválasztása)
	-[games]: Az játékoknak a listája amibõl választhatunk.
	-[gameboard]: Játék közben, a különbözõ elemeket tartalmazó felület
	-[backend]: A kiszolgáló, ahonnan az alkalmazást el lehet érni 
	-[frontend]:  egy réteg ami feladata a rendszerbõl kijutó adatok prezentálása, illetve a bejövõ adatok fogadása
	-[web-service]:különbözõ programnyelveken írt és különbözõ platformokon futó szoftveralkalmazások interneten keresztül történõ adatcseréjére használt webszolgáltatások.
	-[oktató felület]: A felhasználónak az átlagosnál magasabb jogai vannak("admin"). 
	-[tanuló felület]: Csak olyan jogai vannak amit az oktatói felületen meghatároztak.
	-[statisztika]: A játékokon elért eredmények áttekintése.
	-[játék aktiválása]: A játék elérhetõvé tétele bizonyos emberek számára.
	-[játék deaktiválása]: A játék elzárása mindenki elõl.
